knitr::opts_chunk$set(echo = TRUE,
fig.width = 7,
fig.height = 5,
fig.align = "center",
warning = FALSE,
message = FALSE
)
#-关于A MultiAssayExperiment object对象的一些基础操作
#assays部分
assays(MAE)# 提取数据矩阵部分文件，这是一个list，所以提取每个矩阵需要继续
#--首次安装bio中的R包，保证重复性
# if (!requireNamespace("BiocManager", quietly=TRUE))
#   install.packages("BiocManager")
# BiocManager::install("compbiomed/animalcules")
## 首次测试不安装github版本
# if (!requireNamespace("devtools", quietly=TRUE))
#   install.packages("devtools")
# devtools::install_github("compbiomed/animalcules")
#--载入R包
library(animalcules)
library(SummarizedExperiment)
data_dir = system.file("extdata/MAE.rds", package = "animalcules")
MAE = readRDS(data_dir)
#-关于A MultiAssayExperiment object对象的一些基础操作
#assays部分
assays(MAE)# 提取数据矩阵部分文件，这是一个list，所以提取每个矩阵需要继续
#--下面提取第一个矩阵，这有什么用呢，类似多组学数据，用于操作更加简便。
assays(MAE)[[1]]# 第二个对象类似
assays(MAE)[[2]]
#--colData，也就是对数据矩阵列名的注释信息，类似于phyloseq对象中的map文件
colData(MAE)
# 对于多个矩阵分类和区分信息。
sampleMap(MAE)
#--查看子对象数量，都是s4类对象，可以单独提取
experiments(MAE)
#--就单个的S4类对象进行各部分数据的提取
microbe <- MAE[["MicrobeGenetics"]]
otu_table <- as.data.frame(SummarizedExperiment::assays(microbe))
tax_table <- as.data.frame(SummarizedExperiment::rowData(microbe))
map <- as.data.frame(SummarizedExperiment::colData(microbe))
# 如何构建这个MAE对象呢？
#--得到phyloserq对象并提取必要数据信息
library(ggClusterNet)
library(phyloseq)
ps
otu = as.data.frame(t(vegan_otu(ps)))
head(otu)
tax = as.data.frame((vegan_tax(ps)))
head(tax)
map = sample_data(ps)
#--首先构造SummarizedExperiment对象，比较简单，类似phyloseq对象
micro <- SummarizedExperiment(assays=list(counts=as.matrix(otu)),
colData=map,
rowData=tax)
# 将SummarizedExperiment对象封装成为ExperimentList
mlist <- ExperimentList()
# 将SummarizedExperiment对象封装成为ExperimentList
library(ExperimentList)
# 将SummarizedExperiment对象封装成为ExperimentList
??ExperimentList
# 将SummarizedExperiment对象封装成为ExperimentList
library(MultiAssayExperiment)
mlist <- ExperimentList()
# 如何构建这个MAE对象呢？
#--得到phyloserq对象并提取必要数据信息
library(ggClusterNet)
library(phyloseq)
ps
otu = as.data.frame(t(vegan_otu(ps)))
head(otu)
tax = as.data.frame((vegan_tax(ps)))
head(tax)
map = sample_data(ps)
#--首先构造SummarizedExperiment对象，比较简单，类似phyloseq对象
micro <- SummarizedExperiment(assays=list(counts=as.matrix(otu)),
colData=map,
rowData=tax)
# 将SummarizedExperiment对象封装成为ExperimentList
library(MultiAssayExperiment)
mlist <- ExperimentList()
mlist[[1]] = micro
names(mlist) = "MicrobeGenetics"# 注意必须命名，否则无法区分每个部分数据组
# 构造不同数据组之间的记录文件
gistmap <- data.frame(
primary = row.names(map),
colname = row.names(map),
stringsAsFactors = FALSE)
maplistowe <- list(MicrobeGenetics = gistmap)
sampMapowe <- listToMap(maplistowe)
# colData文件为分组文件，数据框即可，本案例只有一个微生物组数据，所以直接用map文件就可以了。
#-下面就直接构建了MultiAssayExperiment文件
mae <- MultiAssayExperiment(experiments = mlist, colData = map,
sampleMap = sampMapowe)
p <- filter_summary_pie_box(MAE,
samples_discard = c("subject_2", "subject_4"),
filter_type = "By Metadata",
sample_condition = "AGE")
p
run_animalcules()
?filter_summary_pie_box
p <- filter_summary_bar_density(MAE,
samples_discard = c("subject_2", "subject_4"),
filter_type = "By Metadata",
sample_condition = "SEX")
p
#-关于A MultiAssayExperiment object对象的一些基础操作
#assays部分
assays(MAE)# 提取数据矩阵部分文件，这是一个list，所以提取每个矩阵需要继续
#--下面提取第一个矩阵，这有什么用呢，类似多组学数据，用于操作更加简便。
assays(MAE)[[1]]# 第二个对象类似
assays(MAE)[[2]]
#--colData，也就是对数据矩阵列名的注释信息，类似于phyloseq对象中的map文件
colData(MAE)
# 对于多个矩阵分类和区分信息。
sampleMap(MAE)
#--查看子对象数量，都是s4类对象，可以单独提取
experiments(MAE)
#--就单个的S4类对象进行各部分数据的提取
microbe <- MAE[["MicrobeGenetics"]]
otu_table <- as.data.frame(SummarizedExperiment::assays(microbe))
tax_table <- as.data.frame(SummarizedExperiment::rowData(microbe))
map <- as.data.frame(SummarizedExperiment::colData(microbe))
map
#--提取子集，并且提取map文件
microbe <- MAE[['MicrobeGenetics']]
samples <- as.data.frame(colData(microbe))
result <- filter_categorize(samples,
sample_condition="AGE",
new_label="AGE_GROUP",
bin_breaks=c(0,55,75,100),
bin_labels=c('Young','Adult',"Elderly"))
head(result$sam_table)
result$plot.binned
#--提取子集，并且提取map文件
microbe <- MAE[['MicrobeGenetics']]
samples <- as.data.frame(colData(microbe))
result <- filter_categorize(samples,
sample_condition="AGE",
new_label="AGE_GROUP",
bin_breaks=c(0,55,75,100),
bin_labels=c('Young','Adult',"Elderly"))
head(result$sam_table)
result$plot.binned
p <- relabu_barplot(MAE,
tax_level="family",
order_organisms=c('Retroviridae'),
sort_by="organisms",
sample_conditions=c('SEX', 'AGE'),
show_legend=TRUE)
p
p <- relabu_heatmap(MAE,
tax_level="genus",
sort_by="conditions",
sample_conditions=c("SEX", "AGE"))
p
?filter_summary_pie_box
p <- filter_summary_pie_box(MAE,
samples_discard = c("subject_2", "subject_4"),
filter_type = "By Metadata",
sample_condition = "AGE")
p
?do_alpha_div_test
diversity_beta_heatmap(MAE = MAE,
tax_level = 'genus',
input_beta_method = "bray",
input_bdhm_select_conditions = 'DISEASE',
input_bdhm_sort_by = 'condition')
diversity_beta_heatmap(MAE = MAE,
tax_level = 'genus',
input_beta_method = "bray",
input_bdhm_select_conditions = 'DISEASE',
input_bdhm_sort_by = 'condition')
diversity_beta_test(MAE = MAE,
tax_level = 'genus',
input_beta_method = "bray",
input_select_beta_condition =  'DISEASE',
input_select_beta_stat_method = 'PERMANOVA',
input_num_permutation_permanova = 999)
?diversity_beta_test
result <- dimred_pca(MAE,
tax_level="genus",
color="AGE",
shape="DISEASE",
pcx=1,
pcy=2,
datatype="logcpm")
result$plot
result <- dimred_tsne(MAE,
tax_level="phylum",
color="AGE",
shape="GROUP",
k="3D",
initial_dims=30,
perplexity=10,
datatype="logcpm")
p <- differential_abundance(MAE,
tax_level="phylum",
input_da_condition=c("DISEASE"),
min_num_filter = 2,
input_da_padj_cutoff = 0.5)
p
p <- find_biomarker(MAE,
tax_level = "genus",
input_select_target_biomarker = c("SEX"),
nfolds = 3,
nrepeats = 3,
seed = 99,
percent_top_biomarker = 0.2,
model_name = "logistic regression")
# biomarker
p$biomarker
?find_biomarker
